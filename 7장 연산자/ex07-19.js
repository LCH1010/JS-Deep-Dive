// 동등 비교
 5 == 5 // true

 // 타입은 다르지만 암묵적 타입 변환을 통해 타입을 일치시키면 동등
 5 == '5'; // true 

 // 동등 비교, 결과를 예측하기 어렵다.
 '0' == ''; // false
 0 == '' // true
 0 == '0' // true
 false ='false'// false
 false == '0' // false
 false == null; // false
 false == undefined // false
// 위 예시처럼 동등비교 (==) 연산자는 예측하기 어려운 결과를 만들어 낸다. 따라서 동등 비교 연산자는 사용하지 않는편이 좋음, 대신 일치 비교 연산자를 사용 (===)


// 일치비교
5 === 5; // true

// 암묵적 타입 변환을 하지 않고 값을 비교
// 즉, 값과 타입이 모두 같은 경우만 true를 반환.
5 ==='5'; // false

// NaN은 자신과 일치하지 않는 유일한 값
NaN = NaN; // false

// isNaN 함수는 지정한 값이 NaN인지 확인하고 그 결과를 불리언 값으로 변환 -> 숫자가 NaN인지 조사하려면 빌트인 함수 isNaN()을 사용한다.
isNaN(NaN) // true
isNaN(10) // false
isNaN(1+undefined) // true

// 양의 0과 음의 0의 비교, 일치 바교/동등 비교 모두 결과는 true이다 
0 === -0; // ture
0 == -0; // true

// 부동등 비교 연산자 (!=) 와 불일치 비교 연산자 (!==)는 각자 동등 비교(==) 연산자와 일치 비교 (===) 연산자의 반대 개념

// 1. 부동등 비교
5 != 8 ; // true
5 != 5 // false
5 != '5'; // false

// 2. 불일치 비교
5 !== 8; // true
5 !== 5; // false
5 !== '5'; // true




